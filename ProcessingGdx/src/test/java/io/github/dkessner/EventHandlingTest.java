//
// EventHandlingTest.java
//
// Darren Kessner
//

package io.github.dkessner;

import java.util.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static io.github.dkessner.PConstants.*;
import com.badlogic.gdx.Input;


public class EventHandlingTest
{
    final static int KeyDown = 0;
    final static int KeyPressed = 1;
    final static int KeyUp = 2;
    final static int KeyReleased = 3;
    final static int KeyTyped = 4;

    private String intToString(int value)
    {
        String[] names = {"KeyDown", "KeyPressed", "KeyUp", "KeyReleased", "KeyTyped"}; 
        return (0<=value && value<names.length) ? names[value] : "Unknown";
    }

    @Test public void testKeyEventTranslation()
    {
        System.out.println("testKeyEventTranslation()");

        TestPApplet papplet = new TestPApplet();

        int[] input_a = {KeyDown, 29, 
                         KeyTyped, 97, 
                         KeyUp, 29}; 

        int[] expected_a = {KeyPressed, 97, 65, 
                            KeyTyped, 97, 0, 
                            KeyReleased, 97, 65};

        assertTrue(testTranslateKeyEvents(papplet, input_a, expected_a));

        int[] input_A = {KeyDown, Input.Keys.SHIFT_RIGHT, 
                         KeyTyped, 0,               // note: libgdx event not passed on to PApplet
                         KeyDown, Input.Keys.A, 
                         KeyTyped, 'A',
                         KeyUp, Input.Keys.A, 
                         KeyUp, Input.Keys.SHIFT_RIGHT};

        int[] expected_A = {KeyPressed, CODED, SHIFT, 
                            KeyPressed, (int)'A', (int)'A', 
                            KeyTyped, (int)'A', 0,
                            KeyReleased, (int)'A', (int)'A', 
                            KeyReleased, CODED, SHIFT};

        assertTrue(testTranslateKeyEvents(papplet, input_A, expected_A));

        int[] input_UP = {KeyDown, Input.Keys.UP,
                          KeyTyped, 63232,
                          KeyUp, Input.Keys.UP};

        int[] expected_UP = {KeyPressed, CODED, UP,
                             KeyReleased, CODED, UP};

        assertTrue(testTranslateKeyEvents(papplet, input_UP, expected_UP));
    }

    private boolean testTranslateKeyEvents(TestPApplet papplet, int[] input, int[] expected)
    {
        papplet.output.clear();

        // simulate a series of input events, as generated by libgdx

        for (int i=0; i<input.length; i+=2)
        {
            if (input[i] == KeyDown) 
                papplet.keyDown(input[i+1]);
            else if (input[i] == KeyTyped) 
                papplet.keyTyped((char)input[i+1]);
            else if (input[i] == KeyUp) 
                papplet.keyUp(input[i+1]);
        }

        // check to see that the list of Processing key events generated
        // (papplet.output) matches what we expect (expected)

        printInput(input);
        printExpected(expected);
        printOutput(papplet.output);
    
        if (papplet.output.size() != expected.length)
            return false;

        for (int i=0; i<expected.length; i++)
            if (papplet.output.get(i) != expected[i])
                return false;

        return true;
    }

    private void printInput(int[] input)
    {
        System.out.print("input: ");
        for (int i=0; i<input.length; i+=2)
            System.out.print(intToString(input[i]) + " " + input[i+1] + " ");
        System.out.println();
    }

    private void printExpected(int[] expected)
    {
        System.out.print("expected: ");
        for (int i=0; i<expected.length; i+=3)
            System.out.print(intToString(expected[i]) + " " + expected[i+1] + " " + expected[i+2] + " ");
        System.out.println();
    }

    private void printOutput(ArrayList<Integer> output)
    {
        System.out.print("output: ");
        for (int i=0; i<output.size(); i+=3)
            System.out.print(intToString(output.get(i)) + " " + output.get(i+1) + " " + output.get(i+2) + " ");
        System.out.println();
    }

    public class TestPApplet extends PApplet
    {
        // This test PApplet subclass logs the Processing key events as they
        // are generated.

        public void keyPressed()
        {
            output.add(KeyPressed);
            output.add((int)key);
            output.add(keyCode);
        }

        public void keyTyped()
        {
            output.add(KeyTyped);
            output.add((int)key);
            output.add(keyCode);
        }

        public void keyReleased()
        {
            output.add(KeyReleased);
            output.add((int)key);
            output.add(keyCode);
        }

        public ArrayList<Integer> output = new ArrayList<Integer>();
    }

    public static class Event
    {
        public enum Type {KeyPressed, KeyTyped, KeyReleased};
        public Type type;
        public char key;
        public int keyCode;

        public Event(Type type, char key, int keyCode)
        {
            this.type = type;
            this.key = key;
            this.keyCode = keyCode;
        }
    }
}


